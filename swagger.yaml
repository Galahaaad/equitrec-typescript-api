openapi: 3.0.3
info:
  title: API Equitrec
  description: |
    API REST pour la gestion des compétitions équestres avec système de notation, évaluation et **authentification QR Code sécurisée** pour les juges.
    
    ## Authentification
    L'API utilise l'authentification JWT Bearer Token.
    
    ### Rôles disponibles :
    - **SUPER_ADMIN** (idrole: 1) : Accès complet + gestion QR Codes
    - **GÉRANT** (idrole: 2) : Gestion intermédiaire  
    - **JUGE** (idrole: 3) : Gestion des notations et épreuves + authentification QR
    
    ### Authentification QR Code :
    Innovation principale : Les juges peuvent s'authentifier via QR Code pour les compétitions
  version: 1.0.0
  contact:
    name: API Equitrec Support
servers:
  - url: http://localhost:3001/api/v1
    description: Serveur de développement

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Erreur lors de l'opération"
    
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Opération réussie"
        data:
          type: object
    
    User:
      type: object
      properties:
        idutilisateur:
          type: integer
        nomutilisateur:
          type: string
        prenomutilisateur:
          type: string
        email:
          type: string
        username:
          type: string
        idjuge:
          type: integer
          nullable: true
        idrole:
          type: integer
    
    Competition:
      type: object
      properties:
        idcompetition:
          type: integer
        nomcompetition:
          type: string
        datecompetition:
          type: string
          format: date
        idutilisateur:
          type: integer
    
    Epreuve:
      type: object
      properties:
        idepreuve:
          type: integer
        titre:
          type: string
        description:
          type: string
        idjuge:
          type: integer
          nullable: true
        nomjuge:
          type: string
          nullable: true
        prenomjuge:
          type: string
          nullable: true
    
    FicheNotation:
      type: object
      properties:
        idfichenotation:
          type: integer
        idepreuve:
          type: integer
        idcavalier:
          type: integer
        cumulenote:
          type: number
          format: float
        appreciation:
          type: string
    
    Cavalier:
      type: object
      properties:
        idcavalier:
          type: integer
        nomcavalier:
          type: string
        prenomcavalier:
          type: string
        datenaissance:
          type: string
          format: date
        numerodossard:
          type: integer
        idclub:
          type: integer
    
    Club:
      type: object
      properties:
        idclub:
          type: integer
        nomclub:
          type: string
        siret:
          type: string
        adresse:
          type: string
        departement:
          type: string
        region:
          type: string
    
    Juge:
      type: object
      properties:
        idjuge:
          type: integer
        nomjuge:
          type: string
        prenomjuge:
          type: string
        specialite:
          type: string
    
    Categorie:
      type: object
      properties:
        idcategorie:
          type: integer
        nomcategorie:
          type: string
        coefficient:
          type: number
          format: float
    
    Critere:
      type: object
      properties:
        idcritere:
          type: integer
        nomcritere:
          type: string
        valorisation:
          type: number
          format: float
    
    EpreuveWithCriteres:
      type: object
      properties:
        idepreuve:
          type: integer
        titre:
          type: string
        description:
          type: string
        idjuge:
          type: integer
          nullable: true
        nomjuge:
          type: string
          nullable: true
        prenomjuge:
          type: string
          nullable: true
        criteres:
          type: array
          items:
            type: object
            properties:
              idcritere:
                type: integer
              libelle:
                type: string
    
    Caracteristique:
      type: object
      properties:
        idcaracteristique:
          type: integer
        nomcaracteristique:
          type: string
    
    Materiel:
      type: object
      properties:
        idmateriel:
          type: integer
        nommateriel:
          type: string
    
    Niveau:
      type: object
      properties:
        idniveau:
          type: integer
        nomniveau:
          type: string
    
    QRGenerateRequest:
      type: object
      properties:
        judgeId:
          type: integer
        competitionId:
          type: integer
    
    QRValidateRequest:
      type: object
      properties:
        qrToken:
          type: string

paths:
  # Health check
  /health:
    get:
      summary: Vérifier l'état de l'API
      responses:
        '200':
          description: API opérationnelle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  
  # Authentication
  /auth/register:
    post:
      summary: Inscription d'un nouvel utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomutilisateur:
                  type: string
                prenomutilisateur:
                  type: string
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                idrole:
                  type: integer
      responses:
        '201':
          description: Utilisateur créé avec succès
        '400':
          description: Erreur de validation
  
  /auth/login:
    post:
      summary: Connexion utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Identifiants invalides
  
  /auth/profile:
    get:
      summary: Profil utilisateur connecté
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profil utilisateur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  
  # QR Code
  /qr/generate:
    post:
      summary: Générer un QR Code pour juge/compétition
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QRGenerateRequest'
      responses:
        '200':
          description: QR Code généré
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /qr/generate/bulk/{competitionId}:
    post:
      summary: Générer tous les QR Codes d'une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: QR Codes générés
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /qr/validate:
    post:
      summary: Valider un QR Code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QRValidateRequest'
      responses:
        '200':
          description: QR Code validé
        '400':
          description: QR Code invalide
  
  /qr/status/{competitionId}:
    get:
      summary: Statut des QR Codes d'une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Statut des QR Codes
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  # Competitions
  /competitions:
    get:
      summary: Liste des compétitions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des compétitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition'
  
  /competitions/create:
    post:
      summary: Créer une compétition
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomcompetition:
                  type: string
                datecompetition:
                  type: string
                  format: date
                idutilisateur:
                  type: integer
      responses:
        '201':
          description: Compétition créée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /competitions/upcoming:
    get:
      summary: Compétitions à venir
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Compétitions à venir
  
  /competitions/date/{date}:
    get:
      summary: Compétitions par date
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: date
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Compétitions de la date
  
  /competitions/{id}:
    get:
      summary: Détails d'une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de la compétition
    put:
      summary: Modifier une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition modifiée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition supprimée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /competitions/{id}/judges:
    get:
      summary: Compétition avec ses juges
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition avec juges
  
  /competitions/{id}/epreuves:
    get:
      summary: Compétition avec ses épreuves
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition avec épreuves
  
  /competitions/{id}/cavaliers:
    get:
      summary: Compétition avec ses cavaliers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition avec cavaliers
  
  /competitions/{id}/assign-judge:
    post:
      summary: Assigner un juge à une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                judgeId:
                  type: integer
      responses:
        '200':
          description: Juge assigné
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /competitions/{competitionId}/judges/{judgeId}:
    delete:
      summary: Retirer un juge d'une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
        - in: path
          name: judgeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Juge retiré
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /competitions/{id}/assign-epreuve:
    post:
      summary: Assigner une épreuve à une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                epreuveId:
                  type: integer
      responses:
        '200':
          description: Épreuve assignée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /competitions/{competitionId}/epreuves/{epreuveId}:
    delete:
      summary: Retirer une épreuve d'une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
        - in: path
          name: epreuveId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuve retirée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /competitions/{id}/participations:
    get:
      summary: Participations d'une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Participations de la compétition
  
  /competitions/{id}/validate:
    post:
      summary: Valider une compétition (génère fiches et QR codes)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition validée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  # Fiches Notation
  /fiches-notation:
    get:
      summary: Liste des fiches de notation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des fiches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FicheNotation'
  
  /fiches-notation/create:
    post:
      summary: Créer une fiche de notation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idepreuve:
                  type: integer
                idcavalier:
                  type: integer
                cumulenote:
                  type: number
                  format: float
                appreciation:
                  type: string
      responses:
        '201':
          description: Fiche créée
        '403':
          description: Accès refusé (JUGE requis)
  
  /fiches-notation/{id}:
    get:
      summary: Détails d'une fiche de notation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de la fiche
    put:
      summary: Modifier une fiche de notation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiche modifiée
        '403':
          description: Accès refusé (JUGE requis)
    delete:
      summary: Supprimer une fiche de notation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiche supprimée
        '403':
          description: Accès refusé (JUGE requis)
  
  /fiches-notation/{id}/categories:
    get:
      summary: Fiche avec ses catégories
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiche avec catégories
  
  /fiches-notation/cavalier/{cavalierId}:
    get:
      summary: Fiches d'un cavalier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: cavalierId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiches du cavalier
  
  /fiches-notation/epreuve/{epreuveId}:
    get:
      summary: Fiches d'une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: epreuveId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiches de l'épreuve

  /fiches-notation/cavalier/{cavalierId}/competition/{competitionId}:
    get:
      summary: Fiches d'un cavalier pour une compétition spécifique
      description: |
        Récupère toutes les fiches de notation d'un cavalier spécifique pour une compétition donnée.
        Retourne les fiches avec les informations complètes du cavalier, club, épreuve et compétition.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: cavalierId
          required: true
          schema:
            type: integer
          description: ID du cavalier
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
          description: ID de la compétition
      responses:
        '200':
          description: Fiches de notation du cavalier pour la compétition
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Fiches de notation du cavalier pour la compétition récupérées avec succès"
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/FicheNotation'
                        - type: object
                          properties:
                            nomcompetition:
                              type: string
                              description: Nom de la compétition
        '400':
          description: ID cavalier ou compétition invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Non autorisé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /fiches-notation/{id}/assign-categorie:
    post:
      summary: Assigner une catégorie à une fiche
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categorieId:
                  type: integer
      responses:
        '200':
          description: Catégorie assignée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /fiches-notation/{ficheId}/categories/{categorieId}:
    delete:
      summary: Retirer une catégorie d'une fiche
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ficheId
          required: true
          schema:
            type: integer
        - in: path
          name: categorieId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Catégorie retirée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /fiches-notation/competition/{competitionId}/epreuve/{epreuveId}:
    delete:
      summary: Suppression centralisée fiches par compétition/épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
        - in: path
          name: epreuveId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiches supprimées
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /fiches-notation/competition/{competitionId}:
    delete:
      summary: Suppression centralisée fiches par compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiches supprimées
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  # Epreuves
  /epreuves:
    get:
      summary: Liste des épreuves
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des épreuves
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Epreuve'
  
  /epreuves/create:
    post:
      summary: Créer une épreuve
      description: |
        Créer une nouvelle épreuve. L'attribution d'un juge est optionnelle lors de la création.
        Le juge peut être assigné ultérieurement via les endpoints de modification.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - titre
                - description
              properties:
                titre:
                  type: string
                  maxLength: 100
                  description: Titre de l'épreuve (requis, max 100 caractères)
                description:
                  type: string
                  maxLength: 500
                  description: Description de l'épreuve (requise, max 500 caractères)
                idjuge:
                  type: integer
                  nullable: true
                  description: ID du juge assigné (optionnel)
      responses:
        '201':
          description: Épreuve créée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Épreuve créée avec succès"
                  data:
                    $ref: '#/components/schemas/Epreuve'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Non autorisé
        '403':
          description: Accès refusé (JUGE requis)
  
  /epreuves/{id}:
    get:
      summary: Détails d'une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de l'épreuve
    put:
      summary: Modifier une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuve modifiée
        '403':
          description: Accès refusé (JUGE requis)
    delete:
      summary: Supprimer une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuve supprimée
        '403':
          description: Accès refusé (JUGE requis)
  
  /epreuves/{id}/competitions:
    get:
      summary: Épreuve avec ses compétitions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuve avec compétitions
  
  /epreuves/{id}/criteres:
    get:
      summary: Épreuve avec ses critères
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuve avec critères
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Épreuve avec critères récupérée avec succès"
                  data:
                    $ref: '#/components/schemas/EpreuveWithCriteres'
        '400':
          description: ID invalide
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Épreuve non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /epreuves/juge/{jugeId}:
    get:
      summary: Épreuves d'un juge
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jugeId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuves du juge
  
  /epreuves/{id}/assign-competition:
    post:
      summary: Assigner une compétition à une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                competitionId:
                  type: integer
      responses:
        '200':
          description: Compétition assignée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /epreuves/{epreuveId}/competitions/{competitionId}:
    delete:
      summary: Retirer une compétition d'une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: epreuveId
          required: true
          schema:
            type: integer
        - in: path
          name: competitionId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétition retirée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /epreuves/{id}/assign-critere:
    post:
      summary: Assigner un critère à une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                critereId:
                  type: integer
      responses:
        '200':
          description: Critère assigné
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /epreuves/{epreuveId}/criteres/{critereId}:
    delete:
      summary: Retirer un critère d'une épreuve
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: epreuveId
          required: true
          schema:
            type: integer
        - in: path
          name: critereId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Critère retiré
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  # Cavaliers
  /cavaliers:
    get:
      summary: Liste des cavaliers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des cavaliers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cavalier'
  
  /cavaliers/create:
    post:
      summary: Créer un cavalier
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomcavalier:
                  type: string
                prenomcavalier:
                  type: string
                datenaissance:
                  type: string
                  format: date
                numerodossard:
                  type: integer
                idclub:
                  type: integer
      responses:
        '201':
          description: Cavalier créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /cavaliers/{id}:
    get:
      summary: Détails d'un cavalier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du cavalier
    put:
      summary: Modifier un cavalier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cavalier modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un cavalier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cavalier supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /cavaliers/{id}/participations:
    get:
      summary: Participations d'un cavalier
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Participations du cavalier
    post:
      summary: Inscrire un cavalier à une compétition
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                idcompetition:
                  type: integer
                idniveau:
                  type: integer
      responses:
        '201':
          description: Cavalier inscrit
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /cavaliers/{id}/club:
    get:
      summary: Cavalier avec son club
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cavalier avec club
  
  # Clubs
  /clubs:
    get:
      summary: Liste des clubs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des clubs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Club'
  
  /clubs/create:
    post:
      summary: Créer un club
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomclub:
                  type: string
                siret:
                  type: string
                adresse:
                  type: string
                departement:
                  type: string
                region:
                  type: string
      responses:
        '201':
          description: Club créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /clubs/{id}:
    get:
      summary: Détails d'un club
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du club
    put:
      summary: Modifier un club
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Club modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un club
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Club supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /clubs/{id}/cavaliers:
    get:
      summary: Cavaliers d'un club
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cavaliers du club
  
  # Juges
  /judges:
    get:
      summary: Liste des juges
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des juges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Juge'
  
  /judges/create:
    post:
      summary: Créer un juge
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomjuge:
                  type: string
                prenomjuge:
                  type: string
                specialite:
                  type: string
      responses:
        '201':
          description: Juge créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /judges/{id}:
    get:
      summary: Détails d'un juge
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du juge
    put:
      summary: Modifier un juge
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Juge modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un juge
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Juge supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /judges/{id}/competitions:
    get:
      summary: Compétitions d'un juge
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Compétitions du juge
  
  # Catégories
  /categories:
    get:
      summary: Liste des catégories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des catégories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categorie'
  
  /categories/create:
    post:
      summary: Créer une catégorie
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomcategorie:
                  type: string
                coefficient:
                  type: number
                  format: float
      responses:
        '201':
          description: Catégorie créée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /categories/{id}:
    get:
      summary: Détails d'une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de la catégorie
    put:
      summary: Modifier une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Catégorie modifiée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Catégorie supprimée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /categories/{id}/fiches:
    get:
      summary: Fiches d'une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Fiches de la catégorie
  
  /categories/{id}/assign-fiche:
    post:
      summary: Assigner une fiche à une catégorie
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ficheId:
                  type: integer
      responses:
        '200':
          description: Fiche assignée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  # Critères
  /criteres:
    get:
      summary: Liste des critères
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des critères
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Critere'
  
  /criteres/create:
    post:
      summary: Créer un critère
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomcritere:
                  type: string
                valorisation:
                  type: number
                  format: float
      responses:
        '201':
          description: Critère créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /criteres/{id}:
    get:
      summary: Détails d'un critère
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du critère
    put:
      summary: Modifier un critère
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Critère modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un critère
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Critère supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /criteres/{id}/epreuves:
    get:
      summary: Épreuves d'un critère
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuves du critère
  
  # Caractéristiques
  /caracteristiques:
    get:
      summary: Liste des caractéristiques
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des caractéristiques
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Caracteristique'
  
  /caracteristiques/create:
    post:
      summary: Créer une caractéristique
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomcaracteristique:
                  type: string
      responses:
        '201':
          description: Caractéristique créée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /caracteristiques/{id}:
    get:
      summary: Détails d'une caractéristique
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de la caractéristique
    put:
      summary: Modifier une caractéristique
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Caractéristique modifiée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer une caractéristique
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Caractéristique supprimée
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /caracteristiques/{id}/epreuves:
    get:
      summary: Épreuves d'une caractéristique
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuves de la caractéristique
  
  # Matériels
  /materiaux:
    get:
      summary: Liste des matériels
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des matériels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Materiel'
  
  /materiaux/create:
    post:
      summary: Créer un matériel
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nommateriel:
                  type: string
      responses:
        '201':
          description: Matériel créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /materiaux/{id}:
    get:
      summary: Détails d'un matériel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du matériel
    put:
      summary: Modifier un matériel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Matériel modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un matériel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Matériel supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /materiaux/{id}/epreuves:
    get:
      summary: Épreuves d'un matériel
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Épreuves du matériel
  
  # Niveaux
  /niveaux:
    get:
      summary: Liste des niveaux
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des niveaux
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Niveau'
  
  /niveaux/create:
    post:
      summary: Créer un niveau
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomniveau:
                  type: string
      responses:
        '201':
          description: Niveau créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /niveaux/{id}:
    get:
      summary: Détails d'un niveau
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails du niveau
    put:
      summary: Modifier un niveau
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Niveau modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un niveau
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Niveau supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /niveaux/{id}/cavaliers:
    get:
      summary: Cavaliers d'un niveau
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cavaliers du niveau
  
  # Users
  /users:
    get:
      summary: Liste des utilisateurs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
  /users/create:
    post:
      summary: Créer un utilisateur
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nomutilisateur:
                  type: string
                prenomutilisateur:
                  type: string
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
                idrole:
                  type: integer
      responses:
        '201':
          description: Utilisateur créé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /users/{id}:
    get:
      summary: Détails d'un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de l'utilisateur
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    put:
      summary: Modifier un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur modifié
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
    delete:
      summary: Supprimer un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur supprimé
        '403':
          description: Accès refusé (SUPER_ADMIN requis)
  
  /users/{id}/role:
    get:
      summary: Utilisateur avec son rôle
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Utilisateur avec rôle
        '403':
          description: Accès refusé (SUPER_ADMIN requis)