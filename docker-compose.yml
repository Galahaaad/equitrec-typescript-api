version: '3.8'

services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: equitrec-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: equitrec
      POSTGRES_USER: equitrec_user
      POSTGRES_PASSWORD: equitrec_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./SQL/BddProjet32.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./SQL/InsertProjet32.sql:/docker-entrypoint-initdb.d/02-data.sql
    networks:
      - equitrec-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U equitrec_user -d equitrec"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Node.js
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: equitrec-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: equitrec
      DB_USER: equitrec_user
      DB_PASSWORD: equitrec_password
      DB_SSL: false
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - equitrec-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis pour cache (optionnel, pour futures optimisations)
  redis:
    image: redis:7-alpine
    container_name: equitrec-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - equitrec-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  equitrec-network:
    driver: bridge